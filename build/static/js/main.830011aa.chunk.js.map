{"version":3,"sources":["components/Zones/index.jsx","api/rest.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["socket","io","Zone","zone","setZones","key","cover","style","width","isMobile","window","innerWidth","filter","active","transition","src","Meta","avatar","class","title","name","description","uptime","time","display","justifyContent","alignItems","onChange","axios","get","then","response","data","catch","error","console","log","setZoneOff","setZoneOn","checked","defaultChecked","Time","initialTime","Date","parse","Minutes","Seconds","Action","marginLeft","fontWeight","color","Zones","useState","zones","loading","setLoading","useLayoutEffect","on","minWidth","type","height","map","Header","Layout","Footer","Content","Sider","App","React","innerHeight","setHeight","inline","flexWrap","addEventListener","flexDirection","icon","faShower","className","fontSize","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.830011aa.chunk.js","sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\nimport { Switch, Card, Avatar } from 'antd';\nimport { setZoneOff, setZoneOn, getZoneImage, getZones } from '../../api/rest';\nimport io from 'socket.io-client';\nimport Timer from \"react-compound-timer\"\nimport {\n    BrowserView,\n    MobileView,\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nconst socket = io('http://192.168.124.12:6700/');\n\nconst Zones = () => {\n    const [zones, setZones] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n\n    useLayoutEffect(() => {\n        socket.on('zones_update', (data) => {\n            console.log(data)\n            setZones(data)\n        })\n        getZones().then(({ data }) => {\n            setZones(data);\n            setLoading(false);\n        })\n    }, [])\n    if (loading) {\n        return (\n            <div style={{\n                minWidth: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n            }}>\n                <Loader type=\"Grid\" color=\"#001529\" height={80} width={80} />\n            </div>\n        )\n    }\n    return zones.map(zone => {\n        return <Zone zone={zone} setZones={setZones} />\n    })\n}\n\nconst Zone = ({ zone, setZones }) => {\n    return (\n        <Card key={zone.zone} cover={\n            <img\n                style={{\n                    width: isMobile ? window.innerWidth : (window.innerWidth) / 5,\n                    filter: zone.active ? \"grayscale(0)\" : \"grayscale(1)\",\n                    transition: \"filter 350ms ease-in-out\"\n                }}\n                src={`/api/zone/image/${zone.zone}`}\n            />\n        }\n            style={{ width: isMobile ? window.innerWidth : (window.innerWidth) / 5 }}>\n            <Card.Meta\n                avatar={<i class=\"fas fa-tint\"></i>}\n                title={zone.name}\n                description={zone.uptime ? <Time time={zone.uptime} /> : \"Not Watering\"}\n            />\n            <br />\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\" }}>\n                <Switch onChange={() => zone.active ? setZoneOff({ zone, setZones }) : setZoneOn({ zone, setZones })} checked={zone.active} defaultChecked={zone.active} />\n                <Action zone={zone} />\n            </div>\n        </Card>\n    )\n}\n\nconst Time = ({ time }) => {\n    return (\n        <Timer\n            initialTime={(new Date() - Date.parse(time))}>\n            <Timer.Minutes />:<Timer.Seconds /> minutes\n        </Timer>\n    )\n}\n\nconst Title = ({ zone }) => {\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <div>{zone.name}</div>\n            <Uptime zone={zone} />\n        </div>\n    )\n}\n\nconst Action = ({ zone }) => {\n    return (\n        <div style={{\n            marginLeft: 10,\n            fontWeight: zone.active ? 700 : 300,\n            color: zone.active && \"#1890ff\"\n        }}>{zone.active ? \"Active\" : \"Inactive\"}</div>\n    )\n}\n\nconst Uptime = ({ zone }) => {\n    if (zone.uptime === null) {\n        return null\n    }\n    return (\n        <div>test</div>\n    )\n}\n\nexport default Zones;","import axios from 'axios';\n\nexport const getZones = () => axios.get('/api/zones')\n    .then(response => response)\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\nexport const setZoneOn = ({ zone, setZones }) => {\n    axios.get(`/api/zone/on/${zone.zone}`)\n        .then(response => {\n            setZones(response.data)\n        })\n        .catch(function (error) {\n            // handle error\n            console.log(error);\n        })\n}\n\nexport const setZoneOff = ({ zone, setZones }) => axios.get(`/api/zone/off/${zone.zone}`)\n    .then(response => setZones(response.data))\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\n","import React, { useLayoutEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { getZones } from './api/rest';\nimport Zones from \"./components/Zones\";\nimport io from 'socket.io-client';\nimport { Layout } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee, faWater, faShower } from '@fortawesome/free-solid-svg-icons'\nimport { isMobile } from 'react-device-detect';\n\nconst { Header, Footer, Sider, Content } = Layout;\n\n\nfunction App() {\n  const [height, setHeight] = React.useState(window.innerHeight - 129)\n  const inline = {\n    zones: {\n      height: height,\n      flexWrap: \"wrap\"\n    }\n  }\n\n  window.addEventListener('resize', () => {\n    setHeight(window.innerHeight - 129)\n  })\n\n  return (\n    <Layout>\n      <Header>\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: isMobile ? \"center\" : \"flex-start\", alignItems: \"center\" }}>\n          <FontAwesomeIcon color=\"white\" icon={faShower} />\n          <div style={{ color: \"white\", fontWeight: 900, marginLeft: 10 }}>Rain Maker</div>\n        </div>\n      </Header>\n      <Layout>\n        <Content>\n          <div className=\"zones-container\" style={inline.zones}>\n            <Zones />\n          </div>\n        </Content>\n      </Layout>\n      <Footer>\n        <div style={{ display: \"flex\", justifyContent: \"center\", fontSize: 11, color: \"#b4b6ba\" }}>\n          Canvas 23 Studios\n        </div>\n      </Footer>\n    </Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.fd10fc13.svg\";"],"sourceRoot":""}