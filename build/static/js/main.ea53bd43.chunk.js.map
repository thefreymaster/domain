{"version":3,"sources":["components/Zones/index.jsx","api/rest.js","components/Zones/Calendar.jsx","components/Details/index.jsx","App.js","serviceWorker.js","index.js"],"names":["socket","io","Zone","zone","setZones","style","minHeight","key","cover","width","isMobile","window","innerWidth","transition","alt","src","Meta","avatar","className","title","name","description","uptime","time","display","justifyContent","alignItems","onChange","active","axios","get","then","response","data","catch","error","console","log","setZoneOff","setZoneOn","checked","defaultChecked","Time","initialTime","Date","parse","Minutes","Seconds","Action","marginLeft","fontWeight","color","Zones","useState","zones","loading","setLoading","useLayoutEffect","on","minWidth","type","height","map","paddingLeft","paddingBottom","process","from","to","commonProps","innerHeight","margin","top","right","bottom","left","toISOString","Calendar","React","calendar","setCalendarData","colors","align","emptyColor","direction","Details","props","open","onRequestClose","setOpen","flexDirection","icon","faShower","size","fontSize","Header","Layout","Footer","Content","App","setHeight","inline","flexWrap","paddingTop","paddingRight","maxHeight","position","addEventListener","flexGrow","onClick","faBars","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kZAWMA,G,OAASC,IAAsE,gCAqC/EC,EAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAClB,OACI,kBAAC,IAAD,aAAMC,MAAO,CAACC,UAAW,mBAAoBC,IAAKJ,EAAKA,KAAMK,MACzD,yBACIH,MAAO,CACHI,MAAOC,WAAWC,OAAOC,YAAmC,IAApBD,OAAOC,WAAoB,KAAO,EAE1EC,WAAY,4BAEhBC,IAAI,OACJC,IAAG,0BAAqBZ,EAAKA,SARrC,QAWW,CAAEM,MAAOC,WAAWC,OAAOC,YAAmC,IAApBD,OAAOC,WAAoB,KAAO,IACnF,kBAAC,IAAKI,KAAN,CACIC,OAAQ,uBAAGC,UAAU,gBACrBC,MAAOhB,EAAKiB,KACZC,YAAalB,EAAKmB,OAAS,kBAAC,EAAD,CAAMC,KAAMpB,EAAKmB,SAAa,iBAE7D,6BACA,yBAAKjB,MAAO,CAAEmB,QAAS,OAAQC,eAAgB,aAAcC,WAAY,WACrE,kBAAC,IAAD,CAAQC,SAAU,kBAAMxB,EAAKyB,OCjDnB,SAAC,GAAD,IAAGzB,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OAAwByB,IAAMC,IAAN,wBAA2B3B,EAAKA,OAC7E4B,MAAK,SAAAC,GAAQ,OAAI5B,EAAS4B,EAASC,SACnCC,OAAM,SAAUC,GAEbC,QAAQC,IAAIF,MD6CkCG,CAAW,CAAEnC,OAAMC,aC5DhD,SAAC,GAAwB,IAAtBD,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC9ByB,IAAMC,IAAN,uBAA0B3B,EAAKA,OAC1B4B,MAAK,SAAAC,GACF5B,EAAS4B,EAASC,SAErBC,OAAM,SAAUC,GAEbC,QAAQC,IAAIF,MDqD+DI,CAAU,CAAEpC,OAAMC,cAAaoC,QAASrC,EAAKyB,OAAQa,eAAgBtC,EAAKyB,SACjJ,kBAAC,EAAD,CAAQzB,KAAMA,OAMxBuC,EAAO,SAAC,GAAc,IAAZnB,EAAW,EAAXA,KACZ,OACI,kBAAC,IAAD,CACIoB,YAAc,IAAIC,KAASA,KAAKC,MAAMtB,IACtC,kBAAC,IAAMuB,QAAP,MAFJ,IAEsB,kBAAC,IAAMC,QAAP,MAFtB,aAgBFC,EAAS,SAAC,GAAc,IAAZ7C,EAAW,EAAXA,KACd,OACI,yBAAKE,MAAO,CACR4C,WAAY,GACZC,WAAY/C,EAAKyB,OAAS,IAAM,IAChCuB,MAAOhD,EAAKyB,QAAU,YACtBzB,EAAKyB,OAAS,SAAW,aAatBwB,EApGD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFlD,EADE,OAEciD,oBAAS,GAFvB,mBAETE,EAFS,KAEAC,EAFA,KAchB,OAVAC,2BAAgB,WACZzD,EAAO0D,GAAG,gBAAgB,SAACzB,GACvBG,QAAQC,IAAIJ,GACZ7B,EAAS6B,MClBSJ,IAAMC,IAAI,cACnCC,MAAK,SAAAC,GAAQ,OAAIA,KACjBE,OAAM,SAAUC,GAEbC,QAAQC,IAAIF,MDgBDJ,MAAK,YAAe,IAAZE,EAAW,EAAXA,KACf7B,EAAS6B,GACTuB,GAAW,QAEhB,IACCD,EAEI,yBAAKlD,MAAO,CACRsD,SAAU,OACVnC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAEZ,kBAAC,IAAD,CAAQkC,KAAK,OAAOT,MAAM,UAAUU,OAAQ,GAAIpD,MAAO,MAI5D6C,EAAMQ,KAAI,SAAA3D,GACb,OACI,yBAAKI,IAAKJ,EAAKA,KAAME,MAAO,CAAE0D,YAAarD,WAAW,EAAI,GAAIsD,cAAe,GAAI1D,UAAW,oBACxF,kBAAC,EAAD,CAAMH,KAAMA,EAAMC,SAAUA,S,2CErCtCJ,EAASC,IAAsE,+BAAgCmC,QAAQC,IAAI4B,cACjI,IAAMC,EAAO,IAAItB,KAAK,KAAM,EAAG,GACzBuB,EAAK,IAAIvB,KAAK,KAAM,GAAI,IAExBwB,EAAc,CAClB3D,MAA2B,GAApBE,OAAOC,WACdiD,OAAQlD,OAAO0D,YAAc,IAC7BC,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAERR,KAAMA,EAAKS,cACXR,GAAIA,EAAGQ,eAeIC,EAAW,WAAO,IAAD,EACQC,IAAMxB,SAAS,IADvB,mBACrByB,EADqB,KACXC,EADW,KAW5B,OATAtB,2BAAgB,WACdzD,EAAO0D,GAAG,mBAAmB,SAACzB,GAC5BG,QAAQC,IAAIJ,GACZ8C,EAAgB9C,MDZkBJ,IAAMC,IAAI,iBAC7CC,MAAK,SAAAC,GAAQ,OAAIA,KACjBE,OAAM,SAAUC,GAEbC,QAAQC,IAAIF,MCUKJ,MAAK,YAAe,IAAZE,EAAW,EAAXA,KAC3B8C,EAAgB9C,QAEjB,IAED,kBAAC,IAAD,eACEA,KAAM6C,EACNE,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,WACrDC,MAAM,SACNC,WAAW,UACXC,UAAU,YACNf,K,SCjCKgB,EAdC,SAACC,GACb,OACI,kBAAC,IAAD,CACIC,KAAMD,EAAMC,KACZC,eAAgBF,EAAMG,SAEtB,yBAAKnF,MAAO,CAAEmB,QAAS,OAAQiE,cAAe,SAAUhE,eAAgB,SAAUC,WAAY,WAC1F,kBAAC,IAAD,CAAiByB,MAAM,QAAQuC,KAAMC,IAAUC,KAAK,OACpD,yBAAKvF,MAAO,CAAE8C,MAAO,QAASD,WAAY,IAAK2C,SAAU,KAAzD,iBCHRC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QA0ETC,MAvEf,WAAgB,IAAD,EACerB,IAAMxB,SAAS1C,OAAO0D,aADrC,mBACE8B,GADF,aAEWtB,IAAMxB,UAAS,GAF1B,mBAENiC,EAFM,KAEAE,EAFA,KAGPY,EAAS,CACb9C,MAAO,CACL7C,MAAOC,WAAW,OAAS,MAC3B2F,SAAU,OACVC,WAAY,GACZC,aAAc,IAEhBzB,SAAU,CACR0B,UAAW7F,OAAO0D,YAAc,IAChC7C,QAAS,OACTiE,cAAe,SACfhE,eAAgB,SAChBC,WAAY,SACZjB,MAAO,MACPU,MAAO,CACLsF,SAAU,WACVlC,IAAK,GACLrB,WAAY,OASlB,OAJAvC,OAAO+F,iBAAiB,UAAU,WAChCP,EAAUxF,OAAO0D,YAAc,QAI/B,kBAAC,IAAD,KACE,kBAACyB,EAAD,KACE,yBAAKzF,MAAO,CAAEmB,QAAS,OAAQiE,cAAe,MAAOhE,eAAgBf,WAAW,SAAW,aAAcgB,WAAY,WACnH,kBAAC,IAAD,CAAiByB,MAAM,QAAQuC,KAAMC,MACrC,yBAAKtF,MAAO,CAAE8C,MAAO,QAASD,WAAY,IAAKD,WAAY,KAA3D,cACA,yBAAK5C,MAAO,CAAEsG,SAAU,KACxB,kBAAC,IAAD,CAAQtG,MAAO,CAAC8C,MAAO,SAAUS,KAAK,OAAQgD,QAAS,kBAAMpB,GAASF,IAAOI,KAAM,kBAAC,IAAD,CAAiBA,KAAMmB,UAG9G,kBAAC,IAAD,KACE,kBAACZ,EAAD,KACE,yBAAK5F,MAAO,CACVmB,QAAS,OACTiE,cAAe,QAEf,yBAAKvE,UAAU,kBAAkBb,MAAO+F,EAAO9C,OAC7C,kBAAC,EAAD,QAEA5C,YACA,yBAAKQ,UAAU,qBAAqBb,MAAO+F,EAAOtB,UAChD,kBAAC,EAAD,QAKN,kBAAC,EAAD,CACEQ,KAAMA,EACNE,QAASA,MAIf,kBAACQ,EAAD,KACE,yBAAK3F,MAAO,CAAEmB,QAAS,OAAQC,eAAgB,SAAUoE,SAAU,GAAI1C,MAAO,YAA9E,wBC/DY2D,QACW,cAA7BnG,OAAOoG,SAASC,UAEe,UAA7BrG,OAAOoG,SAASC,UAEhBrG,OAAOoG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzF,MAAK,SAAA0F,GACjCA,EAAaC,kB","file":"static/js/main.ea53bd43.chunk.js","sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\nimport { Switch, Card } from 'antd';\nimport { setZoneOff, setZoneOn, getZones } from '../../api/rest';\nimport io from 'socket.io-client';\nimport Timer from \"react-compound-timer\"\nimport {\n    isMobile\n} from \"react-device-detect\";\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nconst socket = io(process.env.NODE_ENV === 'development' ? 'http://localhost:6700' : 'http://192.168.124.69:6700/');\n\nconst Zones = () => {\n    const [zones, setZones] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useLayoutEffect(() => {\n        socket.on('zones_update', (data) => {\n            console.log(data)\n            setZones(data)\n        })\n        getZones().then(({ data }) => {\n            setZones(data);\n            setLoading(false);\n        })\n    }, [])\n    if (loading) {\n        return (\n            <div style={{\n                minWidth: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n            }}>\n                <Loader type=\"Grid\" color=\"#001529\" height={80} width={80} />\n            </div>\n        )\n    }\n    return zones.map(zone => {\n        return (\n            <div key={zone.zone} style={{ paddingLeft: isMobile ? 0 : 20, paddingBottom: 20, minHeight: '100% !important' }}>\n                <Zone zone={zone} setZones={setZones} />\n            </div>\n        )\n    })\n}\n\nconst Zone = ({ zone, setZones }) => {\n    return (\n        <Card style={{minHeight: '100% !important'}} key={zone.zone} cover={\n            <img\n                style={{\n                    width: isMobile ? window.innerWidth : ((window.innerWidth * .85) - 100) / 4,\n                    // filter: zone.active ? \"grayscale(0)\" : \"grayscale(1)\",\n                    transition: \"filter 350ms ease-in-out\"\n                }}\n                alt=\"lawn\"\n                src={`/api/zone/image/${zone.zone}`}\n            />\n        }\n            style={{ width: isMobile ? window.innerWidth : ((window.innerWidth * .85) - 100) / 4 }}>\n            <Card.Meta\n                avatar={<i className=\"fas fa-tint\"></i>}\n                title={zone.name}\n                description={zone.uptime ? <Time time={zone.uptime} /> : \"Not Watering\"}\n            />\n            <br />\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\" }}>\n                <Switch onChange={() => zone.active ? setZoneOff({ zone, setZones }) : setZoneOn({ zone, setZones })} checked={zone.active} defaultChecked={zone.active} />\n                <Action zone={zone} />\n            </div>\n        </Card>\n    )\n}\n\nconst Time = ({ time }) => {\n    return (\n        <Timer\n            initialTime={(new Date() - Date.parse(time))}>\n            <Timer.Minutes />:<Timer.Seconds /> minutes\n        </Timer>\n    )\n}\n\n// const Title = ({ zone }) => {\n//     return (\n//         <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n//             <div>{zone.name}</div>\n//             <Uptime zone={zone} />\n//         </div>\n//     )\n// }\n\nconst Action = ({ zone }) => {\n    return (\n        <div style={{\n            marginLeft: 10,\n            fontWeight: zone.active ? 700 : 300,\n            color: zone.active && \"#6b9b6f\"\n        }}>{zone.active ? \"Active\" : \"Inactive\"}</div>\n    )\n}\n\n// const Uptime = ({ zone }) => {\n//     if (zone.uptime === null) {\n//         return null\n//     }\n//     return (\n//         <div>test</div>\n//     )\n// }\n\nexport default Zones;","import axios from 'axios';\n\nexport const getZones = () => axios.get('/api/zones')\n    .then(response => response)\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\nexport const setZoneOn = ({ zone, setZones }) => {\n    axios.get(`/api/zone/on/${zone.zone}`)\n        .then(response => {\n            setZones(response.data)\n        })\n        .catch(function (error) {\n            // handle error\n            console.log(error);\n        })\n}\n\nexport const setZoneOff = ({ zone, setZones }) => axios.get(`/api/zone/off/${zone.zone}`)\n    .then(response => setZones(response.data))\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\nexport const getCalendarEntries = () => axios.get('/api/calendar')\n    .then(response => response)\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\n","import React, { useLayoutEffect } from 'react';\nimport { ResponsiveCalendar } from '@nivo/calendar'\nimport { getCalendarEntries } from '../../api/rest';\nimport io from 'socket.io-client';\n\nconst socket = io(process.env.NODE_ENV === 'development' ? 'http://localhost:6700' : 'http://192.168.124.69:6700/'); console.log(process.env.NODE_ENV)\nconst from = new Date(2020, 0, 1)\nconst to = new Date(2020, 11, 31)\n\nconst commonProps = {\n  width: window.innerWidth * 0.2,\n  height: window.innerHeight - 128,\n  margin: {\n    top: 50,\n    right: 10,\n    bottom: 10,\n    left: 50,\n  },\n  from: from.toISOString(),\n  to: to.toISOString(),\n}\n\nconst theme = {\n  axis: {\n    textColor: '#eee',\n    fontSize: '14px',\n    tickColor: '#eee',\n  },\n  grid: {\n    stroke: '#888',\n    strokeWidth: 1\n  },\n};\n\nexport const Calendar = () => {\n  const [calendar, setCalendarData] = React.useState([]);\n  useLayoutEffect(() => {\n    socket.on('calendar_update', (data) => {\n      console.log(data)\n      setCalendarData(data)\n    })\n    getCalendarEntries().then(({ data }) => {\n      setCalendarData(data);\n    })\n  }, [])\n  return (\n    <ResponsiveCalendar\n      data={calendar}\n      colors={['#2d472a', '#5f8b63', '#7fc085', '#91b594', '#5d9761']}\n      align=\"center\"\n      emptyColor=\"#d6d6d6\"\n      direction=\"vertical\"\n      {...commonProps}\n    />\n  )\n}\n","import React from 'react';\nimport Drawer from 'react-drag-drawer'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShower } from '@fortawesome/free-solid-svg-icons'\n\nconst Details = (props) => {\n    return (\n        <Drawer\n            open={props.open}\n            onRequestClose={props.setOpen}\n        >\n            <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\n                <FontAwesomeIcon color=\"white\" icon={faShower} size=\"6x\" />\n                <div style={{ color: \"white\", fontWeight: 900, fontSize: 36 }}>Rain Maker</div>\n            </div>\n        </Drawer>\n    )\n}\n\nexport default Details;","import React from 'react';\nimport './App.css';\nimport Zones from \"./components/Zones\";\nimport { Layout, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShower, faHamburger, faBars } from '@fortawesome/free-solid-svg-icons'\nimport { isMobile } from 'react-device-detect';\nimport { Calendar } from './components/Zones/Calendar';\nimport Details from './components/Details';\n\nconst { Header, Footer, Content } = Layout;\n\n\nfunction App() {\n  const [height, setHeight] = React.useState(window.innerHeight);\n  const [open, setOpen] = React.useState(false);\n  const inline = {\n    zones: {\n      width: isMobile ? '100%' : '85%',\n      flexWrap: 'wrap',\n      paddingTop: 20,\n      paddingRight: 20,\n    },\n    calendar: {\n      maxHeight: window.innerHeight - 128,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '15%',\n      title: {\n        position: 'relative',\n        top: 20,\n        fontWeight: 500\n      }\n    },\n  }\n\n  window.addEventListener('resize', () => {\n    setHeight(window.innerHeight - 129)\n  })\n\n  return (\n    <Layout>\n      <Header>\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: isMobile ? \"center\" : \"flex-start\", alignItems: \"center\" }}>\n          <FontAwesomeIcon color=\"white\" icon={faShower} />\n          <div style={{ color: \"white\", fontWeight: 900, marginLeft: 10 }}>Rain Maker</div>\n          <div style={{ flexGrow: 1 }} />\n          <Button style={{color: 'white'}} type=\"link\"  onClick={() => setOpen(!open)} icon={<FontAwesomeIcon icon={faBars} />} />\n        </div>\n      </Header>\n      <Layout>\n        <Content>\n          <div style={{\n            display: 'flex',\n            flexDirection: 'row'\n          }}>\n            <div className=\"zones-container\" style={inline.zones}>\n              <Zones />\n            </div>\n            {!isMobile &&\n              <div className=\"calendar-container\" style={inline.calendar}>\n                <Calendar />\n              </div>\n            }\n          </div>\n\n          <Details\n            open={open}\n            setOpen={setOpen}\n          />\n        </Content>\n      </Layout>\n      <Footer>\n        <div style={{ display: \"flex\", justifyContent: \"center\", fontSize: 11, color: \"#b4b6ba\" }}>\n          Canvas 23 Studios\n        </div>\n      </Footer>\n    </Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}