{"version":3,"sources":["images/zone_1.jpg","images/zone_2.jpg","images/zone_3.jpg","images/zone_4.jpg","images/zone_5.jpg","components/Zones/index.jsx","api/rest.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","Zone","zone","setZones","key","cover","style","width","window","innerWidth","src","Meta","avatar","class","title","name","description","uptime","Date","parse","toFixed","display","justifyContent","alignItems","onChange","active","axios","get","then","response","data","catch","error","console","log","setZoneOff","setZoneOn","checked","defaultChecked","Action","marginLeft","fontWeight","color","Zones","zones","map","Header","Layout","Content","Footer","Sider","App","useState","loading","setLoading","socket","io","on","setTimeout","inline","height","innerHeight","flexWrap","useLayoutEffect","flexDirection","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.637bc42d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zone_1.d8af1c55.jpg\";","module.exports = __webpack_public_path__ + \"static/media/zone_2.f10fd67b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/zone_3.f4eb1fb0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/zone_4.7c3ef1b2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/zone_5.6db17ad6.jpg\";","import React, { useState, useLayoutEffect } from 'react';\nimport { Switch, Card, Avatar } from 'antd';\nimport { setZoneOff, setZoneOn, getZoneImage } from '../../api/rest';\nimport Zone1 from \"../../images/zone_1.jpg\";\nimport Zone2 from \"../../images/zone_2.jpg\";\nimport Zone3 from \"../../images/zone_3.jpg\";\nimport Zone4 from \"../../images/zone_4.jpg\";\nimport Zone5 from \"../../images/zone_5.jpg\";\n\n\nconst Zones = ({ zones, setZones }) => {\n    return zones.map(zone => {\n        return <Zone zone={zone} setZones={setZones} />\n    })\n}\n\nconst Zone = ({ zone, setZones }) => {\n    return (\n        <Card key={zone.zone} cover={\n            <img\n                style={{ width: (window.innerWidth) / 4 }}\n                src={`/api/zone/image/${zone.zone}`}\n            />\n        }\n            style={{ width: (window.innerWidth) / 4 }}>\n            <Card.Meta\n                avatar={<i class=\"fas fa-tint\"></i>}\n                title={zone.name}\n                description={zone.uptime ? `Running for ${((new Date() - Date.parse(zone.uptime)) / 1000 / 60).toFixed(2)} minutes` : null}\n            />\n            <br />\n            <div style={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\" }}>\n                <Switch onChange={() => zone.active ? setZoneOff({ zone, setZones }) : setZoneOn({ zone, setZones })} checked={zone.active} defaultChecked={zone.active} />\n                <Action zone={zone} />\n            </div>\n        </Card>\n    )\n}\n\nconst Title = ({ zone }) => {\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <div>{zone.name}</div>\n            <Uptime zone={zone} />\n        </div>\n    )\n}\n\nconst Action = ({ zone }) => {\n    return (\n        <div style={{\n            marginLeft: 10,\n            fontWeight: zone.active ? 700 : 300,\n            color: zone.active && \"#1890ff\"\n        }}>{zone.active ? \"Active\" : \"Inactive\"}</div>\n    )\n}\n\nconst Uptime = ({ zone }) => {\n    if (zone.uptime === null) {\n        return null\n    }\n    return (\n        <div>test</div>\n    )\n}\n\nexport default Zones;","import axios from 'axios';\n\nexport const getZones = () => axios.get('/api/zones')\n    .then(response => response)\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\nexport const setZoneOn = ({ zone, setZones }) => {\n    axios.get(`/api/zone/on/${zone.zone}`)\n        .then(response => {\n            setZones(response.data)\n        })\n        .catch(function (error) {\n            // handle error\n            console.log(error);\n        })\n}\n\nexport const setZoneOff = ({ zone, setZones }) => axios.get(`/api/zone/off/${zone.zone}`)\n    .then(response => setZones(response.data))\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n\n","import React, { useLayoutEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { getZones } from './api/rest';\nimport Zones from \"./components/Zones\";\nimport io from 'socket.io-client';\nimport { Layout } from 'antd';\nconst { Header, Footer, Sider, Content } = Layout;\n\n\nfunction App() {\n  const [zones, setZones] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const socket = io('http://localhost:6700');\n\n  socket.on('zones_update', (data) => {\n    setTimeout(() => {\n      setZones(data)\n    }, 1000);\n  })\n  \n  const inline = {\n    zones: {\n      height: window.innerHeight - 64,\n      flexWrap: \"wrap\"\n    }\n  }\n\n  useLayoutEffect(() => {\n    socket.on('zones_update', (data) => {\n      console.log(data);\n    })\n    getZones().then(({ data }) => {\n      setZones(data);\n      setLoading(false);\n    })\n  }, [])\n  return (\n    <Layout>\n      <Header>\n        <div style={{display: \"flex\", flexDirection: \"row\"}}>\n          <div style={{ color: \"white\", fontWeight: 900 }}>Rainmaker</div>\n        </div>\n      </Header>\n      <Layout>\n        <Content>\n          <div className=\"zones-container\" style={inline.zones}>\n            {loading ? \"Loading\" : <Zones setZones={setZones} zones={zones} />}\n          </div>\n        </Content>\n      </Layout>\n    </Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.fd10fc13.svg\";"],"sourceRoot":""}